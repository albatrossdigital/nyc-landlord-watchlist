# CLI
# download data from http://www1.nyc.gov/site/hpd/about/violation-open-data.page:
cd /var/lib/mysql/working/2015/data
wget http://www1.nyc.gov/assets/hpd/downloads/misc/Violations20150901.zip
wget http://www1.nyc.gov/assets/hpd/downloads/misc/Violations20150801.zip
wget http://www1.nyc.gov/assets/hpd/downloads/misc/Violations20150701.zip
wget http://www1.nyc.gov/assets/hpd/downloads/misc/Violations20150601.zip
wget http://www1.nyc.gov/assets/hpd/downloads/misc/Violations20150501.zip
wget http://www1.nyc.gov/assets/hpd/downloads/misc/Violations20150401.zip
wget http://www1.nyc.gov/assets/hpd/downloads/misc/Violation20150301.zip
wget http://www1.nyc.gov/assets/hpd/downloads/misc/Violations20150201.zip
wget http://www1.nyc.gov/assets/hpd/downloads/misc/Violations20150101.zip
wget http://www1.nyc.gov/assets/hpd/downloads/misc/Violations20151201.zip
wget http://www1.nyc.gov/assets/hpd/downloads/misc/Violations20151101.zip
@todo: oct 2015
unzip \*.zip


# mysql steps for data aggregation
create database watchlist2015;
use watchlist2015;






# --------------------------------------------------
# Exclusions
# --------------------------------------------------


# Create a table for the excluded buildings (in the AEP program). Links: 
# http://www.nyc.gov/html/hpd/html/owners/list-of-200-buildings-2015.pdf
# http://www.nyc.gov/html/hpd/downloads/pdf/AEP-report.pdf
@todo

drop table if exists 2015_buildings_exclude;
create table 2015_buildings_exclude (
  HouseNumber VARCHAR(16) , 
  StreetName VARCHAR(156) 
);

# CLI 

# Buildings excluded from lists sent from the Advocate's office (mostly HPD)
cd /var/lib/mysql/working/2015/exclusions
chown mysql:mysql *
mysqlimport --fields-optionally-enclosed-by="\""  --fields-terminated-by="," --lines-terminated-by="\n" -uroot -pmaith watchlist2015 "/var/lib/mysql/working/2015/exclusions/2015_buildings_exclude.csv"




# Create a table for the excluded buildings (requested by HPD). Source: HPD Press Officer.
@todo
drop table if exists 2015_buildings_exclude_aep;
create table 2015_buildings_exclude_aep (
  address varchar(256)
);

# CLI
cd /var/lib/mysql/working/2015/exclusions
chown -R mysql:mysql .
mysqlimport --fields-optionally-enclosed-by="\""  --fields-terminated-by="," --lines-terminated-by="\n" -uroot -pmaith watchlist2015 "/var/lib/mysql/working/2015/exclusions/2015_buildings_exclude_aep.csv"





# Create a table for the excluded landlords (requested by HPD). Source: HPD Press Officer.
drop table if exists 2015_landlords_exclude;
create table 2015_landlords_exclude (
  org varchar(256),
  lname varchar(256),
  fname varchar(256)
);

# CLI
cd /var/lib/mysql/working/2015/exclusions
chown -R mysql:mysql .
mysqlimport --fields-optionally-enclosed-by="\""  --fields-terminated-by="," --lines-terminated-by="\n" -uroot -pmaith watchlist2015 "/var/lib/mysql/working/2015/exclusions/2015_landlords_exclude.csv"




# --------------------------------------------------
# Buildings
# --------------------------------------------------



drop table if exists 2015_buildings_registration;
create table 2015_buildings_registration (
  RegistrationID int(13),
BuildingID int(13),
BoroID varchar(256),
Boro varchar(256),
HouseNumber varchar(256),
LowHouseNumber varchar(256),
HighHouseNumber varchar(256),
StreetName varchar(256),
StreetCode varchar(256),
Zip varchar(256),
Block varchar(256),
Lot varchar(256),
BIN varchar(256),
CommunityBoard varchar(256),
LastRegistrationDate varchar(256),
RegistrationEndDate varchar(256),
  KEY `BuildingID` (`BuildingID`)
); 


drop table if exists 2015_buildings_registration_contact;
create table 2015_buildings_registration_contact (
  RegistrationContactID int(13),
RegistrationID int(13),
Type varchar(256),
ContactDescription varchar(256),
CorporationName varchar(256),
Title varchar(256),
FirstName varchar(256),
MiddleInitial varchar(256),
LastName varchar(256),
BusinessHouseNumber varchar(256),
BusinessStreetName varchar(256),
BusinessApartment varchar(256),
BusinessCity varchar(256),
BusinessState varchar(256),
BusinessZip varchar(256),
  KEY `RegistrationID` (`RegistrationID`)
); 


drop table if exists 2015_buildings_entries;
create table 2015_buildings_entries (
  BuildingID int(13),
  BoroID varchar(256),
  Boro varchar(256),
  HouseNumber varchar(256),
  LowHouseNumber varchar(256),
  HighHouseNumber varchar(256),
  StreetName varchar(256),
  Zip varchar(256),
  Block varchar(256),
  Lot varchar(256),
  BIN varchar(256),
  CommunityBoard varchar(256),
  CensusTract varchar(256),
  ManagementProgram varchar(256),
  DoBBuildingClassID varchar(256),
  DoBBuildingClass varchar(256),
  LegalStories varchar(256),
  LegalClassA varchar(256),
  LegalClassB varchar(256),
  RegistrationID int(13),
  LifeCycle varchar(256),
  RecordStatusID varchar(256),
  RecordStatus  varchar(256),
  KEY `BuildingID` (`BuildingID`)
); 



# Files from 
# - Buildings: http://www1.nyc.gov/site/hpd/about/Building-open-data.page
# - Registrations, registrations_contact : http://www1.nyc.gov/site/hpd/about/registration-open-data.page

# rm -r /var/lib/mysql/landlordwatchlist/2013_buildings_raw.csv
# cd /var/lib/mysql/working/2015/buildings
# cp Building20150930.txt /var/lib/mysql/landlordwatchlist/2015_buildings_entries.csv
# cp Registration20150930.txt /var/lib/mysql/landlordwatchlist/2015_buildings_registration.csv
# cp RegistrationContact20150930.txt /var/lib/mysql/landlordwatchlist/2015_buildings_registration_contact.csv

# chown mysql:mysql /var/lib/mysql/landlordwatchlist/*

# CLI: 
# mysqlimport --fields-optionally-enclosed-by="\"" --fields-terminated-by="|" -uroot -p watchlist2015 "/var/lib/mysql/landlordwatchlist/2015_buildings_registration.csv"
# mysqlimport --fields-optionally-enclosed-by="\"" --fields-terminated-by="|" -uroot -p watchlist2015 "/var/lib/mysql/landlordwatchlist/2015_buildings_registration_contact.csv"
# mysqlimport --fields-optionally-enclosed-by="\"" --fields-terminated-by="|" -uroot -p watchlist2015 "/var/lib/mysql/landlordwatchlist/2015_buildings_entries.csv"




drop table if exists 2015_buildings_registration_contact_grouped;
create table 2015_buildings_registration_contact_grouped (
  RegistrationContactID int(13),
RegistrationID int(13),
Type varchar(256),
ContactDescription varchar(256),
CorporationName varchar(256),
Title varchar(256),
FirstName varchar(256),
MiddleInitial varchar(256),
LastName varchar(256),
BusinessHouseNumber varchar(256),
BusinessStreetName varchar(256),
BusinessApartment varchar(256),
BusinessCity varchar(256),
BusinessState varchar(256),
BusinessZip varchar(256),
BuildingID int(13),
BoroID varchar(256),
Boro varchar(256),
HouseNumber varchar(256),
LowHouseNumber varchar(256),
HighHouseNumber varchar(256),
StreetName varchar(256),
StreetCode varchar(256),
  KEY `RegistrationID` (`RegistrationID`)
); 

insert into 2015_buildings_registration_contact_grouped 
SELECT 
c.RegistrationContactID,
c.RegistrationID,
c.Type,
c.ContactDescription,
c.CorporationName,
c.Title,
c.FirstName,
c.MiddleInitial,
c.LastName,
c.BusinessHouseNumber,
c.BusinessStreetName,
c.BusinessApartment,
c.BusinessCity,
c.BusinessState,
c.BusinessZip,
r.BuildingID,
r.BoroID,
r.Boro,
r.HouseNumber,
r.LowHouseNumber,
r.HighHouseNumber,
r.StreetName,
r.StreetCode
FROM  `2015_buildings_registration_contact` c
join 2015_buildings_registration r on r.registrationID = c.registrationID 
WHERE c.Type =  "HeadOfficer"
GROUP BY registrationID;

update 2015_buildings_registration_contact_grouped g set CorporationName = (select c.CorporationName from 2015_buildings_registration_contact c where c.RegistrationID = g.RegistrationID and c.Type="CorporateOwner" order by RegistrationContactID limit 1);



drop table if exists 2015_buildings_raw;
create table 2015_buildings_raw (
  BuildingID int(13),
  Boro varchar(256),
  HouseNumber varchar(256),
  LowHouseNumber varchar(256),
  HighHouseNumber varchar(256),
  StreetName varchar(256),
  Zip varchar(256),
  LegalClassA varchar(256),
  LegalClassB varchar(256),
  RegistrationID varchar(256),
  LifeCycle varchar(256),
  RecordStatusID varchar(256),
  RecordStatus  varchar(256),
  CorporationName varchar(256),
Title varchar(256),
FirstName varchar(256),
MiddleInitial varchar(256),
LastName varchar(256),
BusinessHouseNumber varchar(256),
BusinessStreetName varchar(256),
BusinessApartment varchar(256),
BusinessCity varchar(256),
BusinessState varchar(256),
BusinessZip varchar(256),
  KEY `BuildingID` (`BuildingID`)
); 
insert into 2015_buildings_raw 
select
e.BuildingID,
e.Boro,
e.HouseNumber,
e.LowHouseNumber,
e.HighHouseNumber,
e.StreetName,
e.Zip,
e.LegalClassA,
e.LegalClassB,
e.RegistrationID,
e.LifeCycle,
e.RecordStatusID,
e.RecordStatus ,
g.CorporationName,
g.Title,
g.FirstName,
g.MiddleInitial,
g.LastName,
g.BusinessHouseNumber,
g.BusinessStreetName,
g.BusinessApartment,
g.BusinessCity,
g.BusinessState,
g.BusinessZip
from 2015_buildings_entries e
join 2015_buildings_registration_contact_grouped g on g.RegistrationID = e.RegistrationID;



# --------------------------------------------------
# DOB violations: ( department of building ) building violations
# --------------------------------------------------

drop table if exists 2015_dob_violations;
create table 2015_dob_violations (
  ComplaintNumber int(10),
  Status VARCHAR(156) , 
  DateEntered varchar(12),
  HouseNumber VARCHAR(156),
  HouseStreet VARCHAR(156),
  BIN VARCHAR(156),
  CommunityBoard VARCHAR(156),
  SpecialDistrict VARCHAR(156),
  ComplaintCategory VARCHAR(156),
  Unit VARCHAR(156),
  DispositionDate VARCHAR(156),
  DispositionCode VARCHAR(156),
  InspectionDate VARCHAR(156),
  DOBRunDate VARCHAR(156)
);


# CLI
cd /var/lib/mysql/working/2015/extra
chown -R mysql:mysql .
mv DOB_DATA.csv 2015_dob_violations.csv
mysqlimport --fields-optionally-enclosed-by="\""  --fields-terminated-by="," --lines-terminated-by="\n" -uroot -pmaith watchlist2015 "/var/lib/mysql/working/2015/extra/2015_dob_violations.csv"

update 2015_dob_violations SET HouseStreet = REPLACE(HouseStreet,  '  ',  ' ');
update 2015_dob_violations SET HouseStreet = REPLACE(HouseStreet,  '  ',  ' ');
update 2015_dob_violations SET HouseStreet = REPLACE(HouseStreet,  '  ',  ' ');



drop table if exists 2015_dob_violations_grouped;
create table 2015_dob_violations_grouped (
  ComplaintNumber int(10),
  Status VARCHAR(156) , 
  DateEntered varchar(12),
  HouseNumber VARCHAR(156),
  HouseStreet VARCHAR(156),
  BIN VARCHAR(156),
  CommunityBoard VARCHAR(156),
  SpecialDistrict VARCHAR(156),
  ComplaintCategory VARCHAR(156),
  Unit VARCHAR(156),
  DispositionDate VARCHAR(156),
  DispositionCode VARCHAR(156),
  InspectionDate VARCHAR(156),
  DOBRunDate VARCHAR(156),

  PRIMARY KEY `ComplaintNumber` (`ComplaintNumber`)
);

insert into 2015_dob_violations_grouped select * from 2015_dob_violations
group by ComplaintNumber;


drop table if exists 2015_dob_violations_grouped_sum;
create table 2015_dob_violations_grouped_sum (
  ComplaintNumber int(10),
  num int(10),
  HouseNumber VARCHAR(156),
  HouseStreet VARCHAR(156),

  PRIMARY KEY `ComplaintNumber` (`ComplaintNumber`)
);

insert into 2015_dob_violations_grouped_sum (
  ComplaintNumber,
 num,
 HouseNumber,
 HouseStreet
)
select 
 ComplaintNumber,
 count(*) as num,
 HouseNumber,
 HouseStreet
from 2015_dob_violations_grouped
group by HouseNumber, HouseStreet;




# --------------------------------------------------
# housing court petitions
# --------------------------------------------------
drop table if exists 2015_housing_court_petitions;
create table 2015_housing_court_petitions (
  PropertyAddress VARCHAR(256)
);

# CLI
cd /var/lib/mysql/working/2015/extra
chown -R mysql:mysql .
mv HOUSING_COURT_VIOLATIONS.csv 2015_housing_court_petitions.csv
mysqlimport --fields-optionally-enclosed-by="\""  --fields-terminated-by="," --lines-terminated-by="\n" -uroot -pmaith watchlist2015 "/var/lib/mysql/working/2015/extra/2015_housing_court_petitions.csv"



# --------------------------------------------------
# Address lat/lngs (later on)
# --------------------------------------------------

#scp NYCHA\ Watchlist\ v2\ -\ Copy\ of\ Sheet5.csv root@ec2-54-71-13-7.us-west-2.compute.amazonaws.com:/var/lib/mysql/working/2015/2015_buildings_addresses.csv


# Pull in lat lng data from Google spreadsheets
drop table if exists 2015_buildings_addresses;
create table 2015_buildings_addresses (
  BuildingID INT(10) ,
  full_address VARCHAR(156) , 
  lat FLOAT(8),
  lng FLOAT(8)
);

# with no db selected
#insert into watchlist2015.2015_buildings_addresses
#select * from watchlist2014.2014_buildings_addresses;

# CLI
cd /var/lib/mysql/working/2015/extra
chown -R mysql:mysql .
mysqlimport --fields-optionally-enclosed-by="\""  --fields-terminated-by="," --lines-terminated-by="\n" -uroot -pmaith watchlist2015 "/var/lib/mysql/working/2015/extra/2015_buildings_addresses.csv"







# --------------------------------------------------
# Watchlist
# --------------------------------------------------


drop table if exists 2015_FOILVIOL;
create table 2015_FOILVIOL (
  ViolationID INT(10) , 
  BuildingID INT(10) , 
  RegistrationID INT(10) , 
  BoroID VARCHAR(32) , 
  Boro VARCHAR(32) , 
  HouseNumber VARCHAR(16) , 
  LowHouseNumber VARCHAR(16) , 
  HighHouseNumber VARCHAR(16) , 
  StreetName VARCHAR(156) , 
  StreetCode VARCHAR(156) , 
  Zip VARCHAR(16) , 
  Apartment VARCHAR(16) , 
  Story INT(3) , 
  Block INT(10) ,
  Lot INT(3) ,  
  Class VARCHAR(16) , 
  InspectionDate VARCHAR(12) , 
  ApprovedDate VARCHAR(12) , 
  OriginalCertifyByDate VARCHAR(12) , 
  OriginalCorrectByDate VARCHAR(12) , 
  NewCertifyByDate VARCHAR(12) , 
  NewCorrectByDate VARCHAR(12) , 
  CertifiedDate VARCHAR(12) , 
  OrderNumber INT(10) , 
  NOVID INT(16) , 
  NOVDescription VARCHAR(500),
  NOVIssueDate VARCHAR(12),
  CurrentStatusID VARCHAR(12),
  CurrentStatus VARCHAR(500),
  CurrentStatusDate VARCHAR(12),
  KEY BuildingID (BuildingID), 
  KEY ViolationID (ViolationID)
);

# CLI
# Make sure the headings are all the same (`head *.txt -n1 > head.csv`).
cd /var/lib/mysql/working/2015/



#cat *.txt > 2015_FOILVIOL.txt


#mysqlimport --fields-optionally-enclosed-by="\"" --columns="ViolationID,BuildingID,RegistrationID,BoroID,Boro,HouseNumber,LowHouseNumber,HighHouseNumber,StreetName,StreetCode,Zip,Apartment,Story,Block,Lot,Class,InspectionDate,ApprovedDate,OriginalCertifyByDate,OriginalCorrectByDate,NewCertifyByDate,NewCorrectByDate,CertifiedDate,OrderNumber,NOVID,NOVDescription,NOVIssueDate,CurrentStatusID,CurrentStatus,CurrentStatusDate" --fields-terminated-by="|" --lines-terminated-by="\r\n" -uroot -pmaith watchlist2015 "/var/lib/mysql/working/2015/2015_FOILVIOL.txt"




# 2013 Data
# --------------------------------------------------
# For 2013_violations, 2014_violations see WORKING-2014.txt



# Aggregate violations by violation id
# --------------------------------------------------

drop table if exists 2015_violations;
create table 2015_violations (
  ViolationID INT(10) , 
  BuildingID INT(10) , 
  RegistrationID INT(10) , 
  BoroID VARCHAR(32) , 
  Boro VARCHAR(32) , 
  HouseNumber VARCHAR(16) , 
  LowHouseNumber VARCHAR(16) , 
  HighHouseNumber VARCHAR(16) , 
  StreetName VARCHAR(156) , 
  StreetCode VARCHAR(156) , 
  Zip VARCHAR(16) , 
  Apartment VARCHAR(16) , 
  Story INT(3) , 
  Block INT(10) ,
  Lot INT(3) ,  
  Class VARCHAR(16) , 
  InspectionDate VARCHAR(12) , 
  ApprovedDate VARCHAR(12) , 
  OriginalCertifyByDate VARCHAR(12) , 
  OriginalCorrectByDate VARCHAR(12) , 
  NewCertifyByDate VARCHAR(12) , 
  NewCorrectByDate VARCHAR(12) , 
  CertifiedDate VARCHAR(12) , 
  OrderNumber INT(10) , 
  NOVID INT(16) , 
  NOVDescription VARCHAR(500),
  NOVIssueDate VARCHAR(12),
  CurrentStatusID VARCHAR(12),
  CurrentStatus VARCHAR(500),
  CurrentStatusDate VARCHAR(12),
  KEY BuildingID (BuildingID), 
  KEY ViolationID (ViolationID)
);
insert into 2015_violations
SELECT *
FROM  `2015_FOILVIOL` 
group by ViolationID;
order by STR_TO_DATE(CurrentStatusDate, '%c/%e/%Y') desc;


DELETE v.* FROM 2015_violations v 
inner join 2015_FOILVIOL a on a.ViolationID=v.ViolationID
where a.CurrentStatus="VIOLATION CLOSED" or a.CurrentStatus="VIOLATION DISMISSED";
DELETE v.* FROM 2015_violations v where v.CurrentStatus="CurrentStatus";



# For 2013_violations, 2014_violations see WORKING-2014.txt




# Aggregate violations by building
# --------------------------------------------------

drop table if exists 2015_buildings;
create table 2015_buildings (
  BuildingID INT(10) , 
  Boro VARCHAR(32) , 
  HouseNumber VARCHAR(16) , 
  LowHouseNumber VARCHAR(16) , 
  HighHouseNumber VARCHAR(16) , 
  StreetName VARCHAR(156) , 
  StreetCode VARCHAR(156) , 
  Zip VARCHAR(16) , 
  Apartment VARCHAR(16) , 
  Story INT(3) , 
  num INT(10),
  a INT(10),
  b INT(10),
  c INT(10),
  i INT(10),
  num2012 INT(10),
  num2013 INT(10),
  num2014 INT(10),
  PRIMARY KEY `BuildingID` (`BuildingID`)
);

insert into 2015_buildings (
  BuildingID, 
  Boro,
  HouseNumber,
  LowHouseNumber,
  HighHouseNumber,
  StreetName,
  StreetCode,
  Zip,
  Apartment,
  Story,
  num
)
select
  BuildingID, 
  Boro,
  HouseNumber,
  LowHouseNumber,
  HighHouseNumber,
  StreetName,
  StreetCode,
  Zip,
  Apartment,
  Story,
  count(*)
FROM 2015_violations f1 
group by BuildingID;


update 2015_buildings b set a = (select count(*) from 2015_violations v where  v.BuildingID=b.BuildingID and v.Class="A");
update 2015_buildings b set b = (select count(*) from 2015_violations v where  v.BuildingID=b.BuildingID and v.Class="B");
update 2015_buildings b set c = (select count(*) from 2015_violations v where  v.BuildingID=b.BuildingID and v.Class="C");
update 2015_buildings b set i = (select count(*) from 2015_violations v where  v.BuildingID=b.BuildingID and v.Class="I");

#update 2015_buildings b set num = (select count(*) from 2015_violations v where  v.BuildingID=b.BuildingID);


drop table if exists 2015_buildings_all;
create table 2015_buildings_all (
  BuildingID INT(10) , 
  LandlordID INT(10) , 
  Boro VARCHAR(32) , 
  HouseNumber VARCHAR(16) , 
  LowHouseNumber VARCHAR(16) , 
  HighHouseNumber VARCHAR(16) , 
  StreetName VARCHAR(156) , 
  StreetCode VARCHAR(156) , 
  Zip VARCHAR(16) , 
  Apartment VARCHAR(16) , 
  Story INT(3) , 
  num INT(10),
  a INT(10),
  b INT(10),
  c INT(10),
  i INT(10),
  num2012 INT(10),
  num2013 INT(10),
  num2014 INT(10),
  dob INT(10),
  housingCourt INT(10),
  score FLOAT(8) DEFAULT 0,
  A_UNITS int(8),
  B_UNITS int(8),
  OWNER1 varchar(128),
  ORGANIZATION varchar(128),
  OWNER1_LN varchar(128),
  OWNER1_FN varchar(128),
  OWNER1_STNM varchar(128),
  OWNER1_APT varchar(128),
  OWNER1_CITY varchar(128),
  OWNER1_STATE varchar(32),
  OWNER1_ZIP varchar(16),
  ORGANIZATION_2 varchar(128),
  ORGANIZATION_3 varchar(128),
  officer varchar(256), 
  org varchar(128),
  exclude INT(2),
  lat FLOAT(8),
  lng FLOAT(8)
);

insert into 2015_buildings_all (
  BuildingID,
  Boro,
  HouseNumber,
  LowHouseNumber,
  HighHouseNumber,
  StreetName,
  StreetCode,
  Zip,
  Apartment,
  Story,
  num,
  a,
  b,
  c,
  i,
  exclude,
  OWNER1,
  ORGANIZATION,
  OWNER1_LN,
  OWNER1_FN,
  org,
  officer
)
select
  b.BuildingID, 
  b1.Boro,
  b1.HouseNumber,
  b1.LowHouseNumber,
  b1.HighHouseNumber,
  b1.StreetName,
  b1.StreetCode,
  b1.Zip,
  b1.Apartment,
  b1.Story,
  num,
  a,
  b,
  c,
  i,
  0,
  b.CorporationName,
b.CorporationName,
b.LastName,
concat(b.FirstName, " ", b.MiddleInitial),
b.CorporationName,
concat(b.FirstName, " ", b.MiddleInitial, " ", b.LastName)
FROM 2015_buildings b1
join 2015_buildings_raw b on 
  b1.HouseNumber = b.HouseNumber 
  and b1.StreetName = b.StreetName
  and b1.Boro = b.Boro;







drop table if exists 2015_buildings_grouped;
create table 2015_buildings_grouped (
  BuildingID INT(10) , 
  LandlordID INT(10) , 
  Boro VARCHAR(32) , 
  HouseNumber VARCHAR(16) , 
  LowHouseNumber VARCHAR(16) , 
  HighHouseNumber VARCHAR(16) , 
  StreetName VARCHAR(156) , 
  StreetCode VARCHAR(156) , 
  Zip VARCHAR(16) , 
  Apartment VARCHAR(16) , 
  Story INT(3) , 
  num INT(10),
  a INT(10),
  b INT(10),
  c INT(10),
  i INT(10),
  num2012 INT(10),
  num2013 INT(10),
  num2014 INT(10),
  dob INT(10),
  housingCourt INT(10),
  score FLOAT(8) DEFAULT 0,
  A_UNITS int(8),
  B_UNITS int(8),
  OWNER1 varchar(128),
  ORGANIZATION varchar(128),
  OWNER1_LN varchar(128),
  OWNER1_FN varchar(128),
  OWNER1_STNM varchar(128),
  OWNER1_APT varchar(128),
  OWNER1_CITY varchar(128),
  OWNER1_STATE varchar(32),
  OWNER1_ZIP varchar(16),
  ORGANIZATION_2 varchar(128),
  ORGANIZATION_3 varchar(128),
  officer varchar(256), 
  org varchar(128),
  exclude INT(2),
  lat FLOAT(8),
  lng FLOAT(8),
   PRIMARY KEY `BuildingID` (`BuildingID`)
);

insert into 2015_buildings_grouped 
select*from 2015_buildings_all group by BuildingID;


# Get num value for this year
update 2015_buildings_grouped b set num = (select count(*) from 2015_violations v where b.BuildingId  = v.BuildingId );


# Do the previous years (not using any database)
update watchlist2015.2015_buildings_grouped b set num2012=(select count(*) from watchlist2014.2012_violations v where b.BuildingId  = v.BLDG_ID );
update watchlist2015.2015_buildings_grouped b set num2013=(select count(*) from watchlist2014.2013_violations v where b.BuildingId  = v.BuildingId );
update watchlist2015.2015_buildings_grouped b set num2014=(select count(*) from watchlist2014.2014_violations v where b.BuildingId  = v.BuildingId );



# dob
update 2015_buildings_grouped b 
left join 2015_dob_violations_grouped_sum v on b.HouseNumber = v.HouseNumber and b.StreetName = v.HouseStreet
set b.dob=v.num;
update 2015_buildings_grouped set dob=0 where isnull(dob);


update 2015_buildings_grouped a
join 2015_buildings_entries e on a.BuildingID = e.BuildingID  
set
  a.A_UNITS=e.LegalClassA,
  a.B_UNITS=e.LegalClassB;


update 2015_buildings_grouped set
  score=(b+c+dob)/(A_UNITS+B_UNITS);




drop table if exists 2015_buildings_watchlist;
create table 2015_buildings_watchlist (
  BuildingID INT(10) , 
  LandlordID INT(10) , 
  Boro VARCHAR(32) , 
  HouseNumber VARCHAR(16) , 
  LowHouseNumber VARCHAR(16) , 
  HighHouseNumber VARCHAR(16) , 
  StreetName VARCHAR(156) , 
  StreetCode VARCHAR(156) , 
  Zip VARCHAR(16) , 
  Apartment VARCHAR(16) , 
  Story INT(3) , 
  num INT(10),
  a INT(10),
  b INT(10),
  c INT(10),
  i INT(10),
  num2012 INT(10),
  num2013 INT(10),
  num2014 INT(10),
  dob INT(10),
  housingCourt INT(10),
  dob_hpd int(10),
  score FLOAT(8) DEFAULT 0,
  A_UNITS int(8),
  B_UNITS int(8),
  OWNER1 varchar(128),
  ORGANIZATION varchar(128),
  OWNER1_LN varchar(128),
  OWNER1_FN varchar(128),
  OWNER1_STNM varchar(128),
  OWNER1_APT varchar(128),
  OWNER1_CITY varchar(128),
  OWNER1_STATE varchar(32),
  OWNER1_ZIP varchar(16),
  ORGANIZATION_2 varchar(128),
  ORGANIZATION_3 varchar(128),
  officer varchar(256), 
  org varchar(128),
  exclude INT(2),
  lat FLOAT(8),
  lng FLOAT(8),
  worstLandlord INT(2),
  PRIMARY KEY `BuildingID` (`BuildingID`)
);
insert into 2015_buildings_watchlist (
 BuildingID, 
  LandlordID, 
  Boro, 
  HouseNumber , 
  LowHouseNumber , 
  HighHouseNumber , 
  StreetName , 
  StreetCode , 
  Zip  , 
  Apartment  , 
  Story , 
  num ,
  a ,
  b ,
  c ,
  i ,
  num2012 ,
  num2013 ,
  num2014 ,
  dob ,
  housingCourt ,
  score ,
  A_UNITS ,
  B_UNITS,
  OWNER1,
  ORGANIZATION,
  OWNER1_LN ,
  OWNER1_FN ,
  OWNER1_STNM ,
  OWNER1_APT ,
  OWNER1_CITY ,
  OWNER1_STATE,
  OWNER1_ZIP ,
  ORGANIZATION_2 ,
  ORGANIZATION_3 ,
  officer, 
  org ,
  exclude ,
  lat,
  lng
)  select  * FROM 2015_buildings_grouped
where ((A_UNITS+B_UNITS >= 35 and score >= 2) or (A_UNITS+B_UNITS < 35 and score >= 3)) AND A_UNITS+B_UNITS >2;

update 2015_buildings_watchlist set dob_hpd=num+dob;




# housing court violations
update 2015_buildings_watchlist b set housingCourt=(
  select count(*) from 2015_housing_court_petitions v where 
  v.PropertyAddress LIKE concat_ws('%', b.HouseNumber, ' ', b.StreetName, '%')
);




# Manually update specific building HEAD OFFICER
update `2015_buildings_watchlist` set
OWNER1_LN="ISRAEL",
OWNER1_FN="JOEL",
officer="JOEL ISRAEL"
 where BuildingID=327787;


# --------------------------------------------
# For addl Exclusions start here
# --------------------------------------------

update 2015_buildings_watchlist set exclude =0;


# aep buildings (101 bldgs)
# We decided to include AEP buildings on the watchlist.
# Call with John Potro, Nov 19, 2015
#update 2015_buildings_watchlist b set b.exclude = (
#  select count(*) from 2015_buildings_exclude_aep e where e.address = CONCAT(b.HouseNumber, " ", b.StreetName) 
#);

# hpd requested removals (155 bldgs)
update 2015_buildings_watchlist b set b.exclude = b.exclude + (
  (select count(*) from 2015_buildings_exclude e where e.HouseNumber  = b.HouseNumber AND e.StreetName = b.StreetName )
);




# Exclude buildigns in receiver (28 bldgs)
update 2015_buildings_watchlist set exclude=1 WHERE OWNER1 LIKE  '%RECEIVER' OR OWNER1 LIKE  '%RECEIVER%' OR OWNER1 LIKE  'RECEIVER%';




# Exclude buildings from landlords exclusion list (1982 bldgs)
update 2015_buildings_watchlist b inner join 2015_landlords_exclude e 
on (
b.org=e.org
or b.org LIKE CONCAT("%",e.org,"%")
)
set b.exclude=1;

update 2015_buildings_watchlist b inner join 2015_landlords_exclude e 
on (
b.OWNER1_LN=e.lname
and b.OWNER1_FN=e.fname
)
set b.exclude=1;


# Manually add Shalom Rubashkin buildings that got removed because his org name contains CORP.
update 2015_buildings_watchlist set exclude=0 where OWNER1_LN="Rubashkin";



# Manual building mapping sent from John on Nov 18, 2015:
# Building ID 2346 should be under landlord ID 50 (Allan H. Goldman and Allan Goldman are same person)
# Building ID 119100 should be under landlord ID 59140
# Building ID 81982 should be under landlord ID 59247 - currently has no landlord ID
# Building ID 24890 should be under landlord ID 50 (Allan Goldlman and Allan Goldman are same person)
# Building ID 363095, Building ID 288103, Building ID 149031 should be under landlord ID 62199 (all are Yechiel Weinberger)
# Building ID 396127 should be under landlord ID 210828 (Ismael Felciano and Ismael Feliciano are the same person)

update 2015_buildings_watchlist set 
officer = (select officer from 2015_buildings_all where BuildingID=50 limit 1),
org = (select org from 2015_buildings_all where BuildingID=50 limit 1)
where BuildingID=2346;

update 2015_buildings_watchlist set 
officer = (select officer from 2015_buildings_all where BuildingID=59140 limit 1),
org = (select org from 2015_buildings_all where BuildingID=59140 limit 1)
where BuildingID=119100;

update 2015_buildings_watchlist set 
officer = (select officer from 2015_buildings_all where BuildingID=59247 limit 1),
org = (select org from 2015_buildings_all where BuildingID=59247 limit 1)
where BuildingID=81982;

update 2015_buildings_watchlist set 
officer = (select officer from 2015_buildings_all where BuildingID=50 limit 1),
org = (select org from 2015_buildings_all where BuildingID=50 limit 1)
where BuildingID=24890;

update 2015_buildings_watchlist set 
officer = (select officer from 2015_buildings_all where BuildingID=62199 limit 1),
org = (select org from 2015_buildings_all where BuildingID=62199 limit 1)
where BuildingID=363095
or BuildingID=288103
or BuildingID=149031; 

update 2015_buildings_watchlist set 
officer = (select officer from 2015_buildings_all where BuildingID=210828 limit 1),
org = (select org from 2015_buildings_all where BuildingID=210828 limit 1)
where BuildingID=396127;

update 2015_buildings_watchlist set 
officer = (select officer from 2015_buildings_all where BuildingID=210828 limit 1),
org = (select org from 2015_buildings_all where BuildingID=210828 limit 1)
where BuildingID=21667;


# Request from 2/2/16:
# Please change the head officers name on the website Joshua Gotlib to Yecheskel Berman. 133 Fort George, Manhattan
update 2015_buildings_watchlist set 
officer = "YECHESKEL BERMAN",
OWNER1_FN = "YECHESKEL",
OWNER1_LN = "BERMAN"
where BuildingID=21667;


select count(*) from 2015_buildings_watchlist where exclude != 0;


# total exclusions: 1439
# total exclusions 11/19/15: 2225
# total exclusions 11/30/15: 2,244
# total exclusions 12/2/15: 2274
# total exclusions 12/18/15: 2288
# total exclusions 2/2/16: 2324

# Add the lat/lngs
# Don't need to do this when just adding addl exclusions
update 2015_buildings_watchlist a
join 2015_buildings_addresses e on a.BuildingId= e.BuildingId  
set
  a.lat=e.lat,
  a.lng=e.lng;


# Alternatively:
#update 2015_buildings_watchlist a
#join 2015_buildings_addresses e on CONCAT(a.HouseNumber, " ", a.StreetName, " ", a.Boro, " NY ", a.Zip)  = e.full_address  
#set
#  a.lat=e.lat,
#  a.lng=e.lng;









drop table if exists 2015_landlords_watchlist;
create table 2015_landlords_watchlist (
  LandlordId INT(10) , 
  buildings INT(10),
  num INT(10),
  a INT(10),
  b INT(10),
  c INT(10),
  i INT(10),
  num2012 INT(10),
  num2013 INT(10),
  num2014 INT(10),
  score FLOAT(8) DEFAULT 0,
  A_UNITS int(8),
  B_UNITS int(8),
  dob INT(10),
  dob_hpd int(10),
  housingCourt INT(10),
  OWNER1 varchar(128),
  OWNER1_LN varchar(128),
  OWNER1_FN varchar(128),
  OWNER1_STNM varchar(128),
  OWNER1_APT varchar(128),
  OWNER1_CITY varchar(128),
  OWNER1_STATE varchar(32),
  OWNER1_ZIP varchar(16),
  ORGANIZATION_2 varchar(128),
  ORGANIZATION_3 varchar(128),
  Boro varchar(128),
  officer varchar(256), 
  org varchar(128)
);
insert into 2015_landlords_watchlist
select 
  BuildingID,
  count(*),
  sum(num),
  sum(a),
  sum(b),
  sum(c),
  sum(i),
  sum(num2012),
  sum(num2013),
  sum(num2014),
  NULL,
  sum(A_UNITS),
  sum(B_UNITS),
  sum(dob),
  num,
  sum(housingCourt),
  OWNER1,
  OWNER1_LN ,
  OWNER1_FN ,
  OWNER1_STNM ,
  OWNER1_APT ,
  OWNER1_CITY ,
  OWNER1_STATE,
  OWNER1_ZIP,
  ORGANIZATION_2,
  ORGANIZATION_3,
  Boro,
  officer, 
  org
FROM 2015_buildings_watchlist
where exclude = 0
group by officer;

update 2015_landlords_watchlist set dob_hpd=num+dob;
update 2015_landlords_watchlist set score=(b+c+dob)/(A_UNITS+B_UNITS);



delete FROM `2015_landlords_watchlist` where (officer="" and org="") or isnull(org);




update 2015_buildings_watchlist b set LandlordID=(select LandlordID from 2015_landlords_watchlist l where b.officer = l.officer);



#update 2015_buildings_watchlist b 
#left join 2015_landlords_exclude e on b.org = e.name
#set b.exclude=1;




drop table if exists 2015_buildings_watchlist_included;
create table 2015_buildings_watchlist_included (
 BuildingID INT(10) , 
  LandlordID INT(10) , 
  Boro VARCHAR(32) , 
  HouseNumber VARCHAR(16) , 
  LowHouseNumber VARCHAR(16) , 
  HighHouseNumber VARCHAR(16) , 
  StreetName VARCHAR(156) , 
  StreetCode VARCHAR(156) , 
  Zip VARCHAR(16) , 
  Apartment VARCHAR(16) , 
  Story INT(3) , 
  num INT(10),
  a INT(10),
  b INT(10),
  c INT(10),
  i INT(10),
  num2012 INT(10),
  num2013 INT(10),
  num2014 INT(10),
  dob INT(10),
  housingCourt INT(10),
  dob_hpd int(10),
  score FLOAT(8) DEFAULT 0,
  A_UNITS int(8),
  B_UNITS int(8),
  OWNER1 varchar(128),
  ORGANIZATION varchar(128),
  OWNER1_LN varchar(128),
  OWNER1_FN varchar(128),
  OWNER1_STNM varchar(128),
  OWNER1_APT varchar(128),
  OWNER1_CITY varchar(128),
  OWNER1_STATE varchar(32),
  OWNER1_ZIP varchar(16),
  ORGANIZATION_2 varchar(128),
  ORGANIZATION_3 varchar(128),
  officer varchar(256), 
  org varchar(128),
  exclude INT(2),
  lat FLOAT(8),
  lng FLOAT(8),
  worstLandlord INT(2),
  PRIMARY KEY `BuildingID` (`BuildingID`)
);
insert into 2015_buildings_watchlist_included
select *
FROM 2015_buildings_watchlist
where exclude = 0;



drop table if exists 2015_landlords_watchlist_100;
create table 2015_landlords_watchlist_100 (
  LandlordId INT(10) , 
  buildings INT(10),
  num INT(10),
  a INT(10),
  b INT(10),
  c INT(10),
  i INT(10),
  num2012 INT(10),
  num2013 INT(10),
  num2014 INT(10),
  score FLOAT(8) DEFAULT 0,
  A_UNITS int(8),
  B_UNITS int(8),
  dob INT(10),
  dob_hpd int(10),
  housingCourt INT(10),
  OWNER1 varchar(128),
  OWNER1_LN varchar(128),
  OWNER1_FN varchar(128),
  OWNER1_STNM varchar(128),
  OWNER1_APT varchar(128),
  OWNER1_CITY varchar(128),
  OWNER1_STATE varchar(32),
  OWNER1_ZIP varchar(16),
  ORGANIZATION_2 varchar(128),
  ORGANIZATION_3 varchar(128),
  Boro varchar(128),
  officer varchar(256), 
  org varchar(128)
);
insert into 2015_landlords_watchlist_100
select *
FROM 2015_landlords_watchlist
order by dob_hpd desc
limit 100;




update 2015_buildings_watchlist set worstLandlord=0;
# Run update commands from export.php
cd /var/www
php export.php >export.txt

# should return > 100
select count(*) from 2015_buildings_watchlist where worstLandlord=1;

# Re-run buildings_included, landlords_100 commands above; 

CLI
 rm  json/*.json json/*.sh json/*.csv json/landlords/*.json json/buildings/*.json json.tgz
 php export.php >export.txt
 tar cvzf json.tgz json
# locally
 scp root@ec2-52-13-62-209.us-west-2.compute.amazonaws.com:/var/www/json.tgz .
# un tar.gz, overwrite json dir locally

ssh -CA root@54.214.3.79 -L 20009:localhost:20009 -L 20008:localhost:20008
rm /root/workspace/nycwatchlist/buildings-tilemill.csv
/usr/share/tilemill/index.js --server=true

cd /home/jeff/Downloads/json
scp buildings-tilemill.csv root@54.214.3.79:/root/workspace/nycwatchlist/

# go to localhost:20009/#/project/watchlist3, rebuild
# Locally:
scp root@54.214.3.79:~/Documents/MapBox/export/watchlist3_a3eed1.mbtiles .
scp watchlist3_a3eed1.mbtiles root@maps.albatrossdigital.com:~/mapbox/mbtiles
  # password in passpack: 

# test on watchlist.local
# update url in directives.js
# Push changes
# Update Drupal table: http://advocate.nyc.gov/node/247/edit